import React from 'react';

function RMemo() {
    return (
        <div>
            <h2>React.Memo</h2>
            <pre>
                <code>
                {`const MyComponent = React.memo(function MyComponent(props) {
  /* рендер с использованием пропсов */
});
`}
                </code>
            </pre>
            <p><b>React.memo</b> — это компонент высшего порядка.</p>
            <p><b>Компонент высшего порядка</b> — это функция, которая принимает компонент и возвращает новый компонент.<br/>
            Если обычный компонент преобразует пропсы в UI, то компонент высшего порядка преобразует компонент в другой компонент.</p>
            <p>Если ваш компонент всегда рендерит одно и то же при неменяющихся пропсах, 
            вы можете обернуть его в вызов <b>React.memo</b> для повышения производительности в некоторых случаях,
            мемоизируя тем самым результат. Это значит, что React будет использовать результат последнего рендера, избегая повторного рендеринга.</p>
            <p>React.memo затрагивает только изменения пропсов. Если функциональный компонент обёрнут в <b>React.memo</b> и использует   
            <b> useState, useReducer или useContext</b>, он будет повторно рендериться при изменении состояния или контекста.</p>
            <p>Этот метод предназначен только для <b>оптимизации производительности</b>.</p>
        </div>
    )
}

export default RMemo